# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover IDE
.idea/

# VS Code
.vscode/

# MacOS
.DS_Store

# Editor backup files
*~
*.swp
*.swo

# Temporary files
tmp/
temp/

# Build artifacts
build/
dist/

# Profiling data
*.profdata
*.profraw
perf.data
perf.data.old
flamegraph.svg

# Documentation build
/target/doc/

# Benchmark results
/target/criterion/

# Coverage reports
tarpaulin-report.html
cobertura.xml
coverage/

# Environment files
.env
.env.local

# Python cache (for potential bindings)
__pycache__/
*.py[cod]
*$py.class

# Node modules (for potential TypeScript bindings)
node_modules/
package-lock.json
yarn.lock

# Log files
*.log
logs/

# Database files (for development)
*.db
*.sqlite
*.rocksdb/

# Memory dumps
*.dump
*.core

# Test artifacts
test-results/
test-output/
*.proptest-regressions

# Development monitoring
.watch-now.yaml
# Data files (generated by tests and runtime)
*.jsonl
*.dat

# Runtime data directories
engram-core/data/
engram-data/

# Baseline templates (keep directory structure only, not generated files)
!docs/assets/consolidation/baseline/.gitkeep
!engram-core/data/consolidation/alerts/.gitkeep

# But still ignore actual data files in baseline directories
docs/assets/consolidation/baseline/*.jsonl
docs/assets/consolidation/baseline/*.dat

# Zig build artifacts (Milestone 10)
/zig/zig-cache/
/zig/zig-out/
