name: Performance Regression Detection

on:
  pull_request:
    paths:
      - 'engram-core/src/query/**'
      - 'engram-core/benches/**'
      - '.github/workflows/performance.yml'
  push:
    branches: [main]
    paths:
      - 'engram-core/src/query/**'
      - 'engram-core/benches/**'
      - '.github/workflows/performance.yml'

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "engram-core -> target"

      - name: Install cargo-criterion
        run: cargo install cargo-criterion --locked

      # Checkout base branch for comparison on PRs
      - name: Checkout base branch
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      # Run benchmarks on base branch (PR only)
      - name: Run base benchmarks
        if: github.event_name == 'pull_request'
        run: |
          cd engram-core
          cargo bench --bench query_parser -- --save-baseline base --noplot

      # Checkout PR branch for comparison
      - name: Checkout PR branch
        if: github.event_name == 'pull_request'
        run: git checkout ${{ github.head_ref }}

      # Run benchmarks on current branch
      - name: Run current benchmarks
        run: |
          cd engram-core
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Compare against base for PRs
            cargo bench --bench query_parser -- --baseline base --noplot
          else
            # Just run benchmarks for main branch
            cargo bench --bench query_parser -- --save-baseline main --noplot
          fi

      # Extract and format benchmark results
      - name: Generate benchmark report
        if: always()
        run: |
          cd engram-core
          echo "## Parser Performance Benchmarks" > benchmark_report.md
          echo "" >> benchmark_report.md

          # Extract timing information from criterion output
          if [ -f target/criterion/parse_simple_recall/base/estimates.json ]; then
            echo "### Performance Targets" >> benchmark_report.md
            echo "" >> benchmark_report.md
            echo "| Query Type | Target | Current | Status |" >> benchmark_report.md
            echo "|------------|--------|---------|--------|" >> benchmark_report.md

            # Parse simple recall
            SIMPLE_TIME=$(cat target/criterion/parse_simple_recall/new/estimates.json 2>/dev/null | jq -r '.mean.point_estimate' | awk '{print $1/1000 " µs"}' || echo "N/A")
            if [ "$SIMPLE_TIME" != "N/A" ]; then
              SIMPLE_STATUS="✅"
              if (( $(echo "$SIMPLE_TIME < 50" | bc -l) )); then
                SIMPLE_STATUS="✅ PASS"
              else
                SIMPLE_STATUS="❌ FAIL"
              fi
            fi
            echo "| Simple RECALL | <50µs | $SIMPLE_TIME | $SIMPLE_STATUS |" >> benchmark_report.md

            # Parse complex spread
            COMPLEX_TIME=$(cat target/criterion/parse_complex_spread/new/estimates.json 2>/dev/null | jq -r '.mean.point_estimate' | awk '{print $1/1000 " µs"}' || echo "N/A")
            if [ "$COMPLEX_TIME" != "N/A" ]; then
              COMPLEX_STATUS="✅"
              if (( $(echo "$COMPLEX_TIME < 100" | bc -l) )); then
                COMPLEX_STATUS="✅ PASS"
              else
                COMPLEX_STATUS="❌ FAIL"
              fi
            fi
            echo "| Complex SPREAD | <100µs | $COMPLEX_TIME | $COMPLEX_STATUS |" >> benchmark_report.md

            # Parse large embedding
            EMBED_TIME=$(cat target/criterion/parse_embedding_1536d/new/estimates.json 2>/dev/null | jq -r '.mean.point_estimate' | awk '{print $1/1000 " µs"}' || echo "N/A")
            if [ "$EMBED_TIME" != "N/A" ]; then
              EMBED_STATUS="✅"
              if (( $(echo "$EMBED_TIME < 200" | bc -l) )); then
                EMBED_STATUS="✅ PASS"
              else
                EMBED_STATUS="❌ FAIL"
              fi
            fi
            echo "| Large embedding (1536d) | <200µs | $EMBED_TIME | $EMBED_STATUS |" >> benchmark_report.md
          fi

          # Check for regressions
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "" >> benchmark_report.md
            echo "### Regression Analysis" >> benchmark_report.md
            echo "" >> benchmark_report.md

            # Criterion will output regression information
            cargo bench --bench query_parser -- --baseline base --noplot 2>&1 | grep -E "Performance has (improved|regressed)" >> benchmark_report.md || echo "No significant changes detected." >> benchmark_report.md
          fi

      # Upload benchmark artifacts
      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            engram-core/target/criterion/**/*.html
            engram-core/benchmark_report.md
          retention-days: 30

      # Comment on PR with results
      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('engram-core/benchmark_report.md', 'utf8');

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## Parser Performance Benchmarks')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      # Fail if performance targets not met
      - name: Check performance targets
        if: github.event_name == 'pull_request'
        run: |
          cd engram-core
          # Run the performance target test
          cargo test --bench query_parser test_performance_targets --release