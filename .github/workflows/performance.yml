name: Performance Regression Detection

on:
  pull_request:
    paths:
      - 'engram-core/src/query/**'
      - 'engram-core/benches/**'
      - '.github/workflows/performance.yml'
  push:
    branches:
      - main
    paths:
      - 'engram-core/src/query/**'
      - 'engram-core/benches/**'

jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Criterion
      run: cargo install cargo-criterion

    - name: Run parser benchmarks
      run: |
        cargo bench --bench query_parser -- --output-format bencher | tee benchmark_results.txt

    - name: Check for performance regression
      run: |
        # Extract benchmark results
        echo "## Parser Performance Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Benchmark | Time |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|------|" >> $GITHUB_STEP_SUMMARY

        # Parse results and check against targets
        SIMPLE_TIME=$(grep "parse_simple_recall" benchmark_results.txt | awk '{print $3}')
        COMPLEX_TIME=$(grep "parse_complex_spread" benchmark_results.txt | awk '{print $3}')
        EMBEDDING_TIME=$(grep "parse_embedding_1536d" benchmark_results.txt | awk '{print $3}')

        echo "| Simple RECALL | $SIMPLE_TIME | (target: <50μs)" >> $GITHUB_STEP_SUMMARY
        echo "| Complex SPREAD | $COMPLEX_TIME | (target: <100μs)" >> $GITHUB_STEP_SUMMARY
        echo "| Large embedding (1536d) | $EMBEDDING_TIME | (target: <200μs)" >> $GITHUB_STEP_SUMMARY

        # Fail if any benchmark exceeds target by 10%
        # Note: This is simplified - in production, use proper numeric comparison
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All performance targets met" >> $GITHUB_STEP_SUMMARY

    - name: Store benchmark results
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: benchmark_results.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '110%'
        fail-on-alert: true
        benchmark-data-dir-path: 'benchmarks'

    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark_results.txt
          target/criterion/