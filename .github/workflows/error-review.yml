name: Error Message Review

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.rs'
      - '.github/workflows/error-review.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.rs'
  schedule:
    # Run weekly error audit
    - cron: '0 9 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  error-review:
    name: Review Error Messages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build error review tool
      run: cargo build --release --bin error-reviewer
      continue-on-error: true
      
    - name: Run error message review
      id: review
      run: |
        # Run the error review
        cargo test --lib error_review 2>&1 | tee review-output.txt
        
        # Extract key metrics (simplified for now)
        TOTAL_ERRORS=$(grep -c "cognitive_error!" **/*.rs || echo "0")
        echo "total_errors=$TOTAL_ERRORS" >> $GITHUB_OUTPUT
        
        # Check for errors without suggestions
        NO_SUGGESTION=$(grep -l "cognitive_error!" **/*.rs | xargs grep -L "suggestion:" || echo "")
        if [ -n "$NO_SUGGESTION" ]; then
          echo "errors_without_suggestions=true" >> $GITHUB_OUTPUT
          echo "❌ Found errors without suggestions in: $NO_SUGGESTION"
        else
          echo "errors_without_suggestions=false" >> $GITHUB_OUTPUT
          echo "✅ All errors have suggestions"
        fi
        
        # Check for errors without examples
        NO_EXAMPLE=$(grep -l "cognitive_error!" **/*.rs | xargs grep -L "example:" || echo "")
        if [ -n "$NO_EXAMPLE" ]; then
          echo "errors_without_examples=true" >> $GITHUB_OUTPUT
          echo "❌ Found errors without examples in: $NO_EXAMPLE"
        else
          echo "errors_without_examples=false" >> $GITHUB_OUTPUT
          echo "✅ All errors have examples"
        fi
        
    - name: Check cognitive load
      run: |
        # Simple cognitive load check - count complex error patterns
        COMPLEX_ERRORS=$(grep -E "cognitive_error!.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n" **/*.rs | wc -l || echo "0")
        
        if [ "$COMPLEX_ERRORS" -gt "5" ]; then
          echo "⚠️ Found $COMPLEX_ERRORS errors with high cognitive load"
          echo "Consider simplifying these error messages"
        fi
        
    - name: Generate error documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Create error catalog
        echo "# Engram Error Catalog" > error-catalog.md
        echo "" >> error-catalog.md
        echo "Generated: $(date)" >> error-catalog.md
        echo "" >> error-catalog.md
        
        # Find and document all errors
        for file in $(find . -name "*.rs" -type f); do
          if grep -q "cognitive_error!" "$file"; then
            echo "## $(basename $file)" >> error-catalog.md
            echo "" >> error-catalog.md
            
            # Extract error summaries (simplified)
            grep -A1 "summary:" "$file" | grep -v "^--" | sed 's/.*summary: /- /' >> error-catalog.md
            echo "" >> error-catalog.md
          fi
        done
        
    - name: Upload error catalog
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: error-catalog
        path: error-catalog.md
        retention-days: 30
        
    - name: Comment PR with review results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const hasNoSuggestions = '${{ steps.review.outputs.errors_without_suggestions }}' === 'true';
          const hasNoExamples = '${{ steps.review.outputs.errors_without_examples }}' === 'true';
          const totalErrors = '${{ steps.review.outputs.total_errors }}';
          
          let status = '✅';
          let title = 'Error Message Review Passed';
          
          if (hasNoSuggestions || hasNoExamples) {
            status = '❌';
            title = 'Error Message Review Failed';
          }
          
          let body = `## ${status} ${title}\n\n`;
          body += `**Total Errors Found:** ${totalErrors}\n\n`;
          
          if (hasNoSuggestions) {
            body += '### ❌ Missing Suggestions\n';
            body += 'Some errors lack actionable suggestions. Every error must include a suggestion field.\n\n';
          }
          
          if (hasNoExamples) {
            body += '### ❌ Missing Examples\n';
            body += 'Some errors lack concrete examples. Every error must include an example field.\n\n';
          }
          
          if (!hasNoSuggestions && !hasNoExamples) {
            body += '### ✅ All Requirements Met\n';
            body += '- All errors have suggestions\n';
            body += '- All errors have examples\n';
            body += '- Cognitive load checks passed\n';
          }
          
          body += '\n### Cognitive Principles\n';
          body += '- **Context**: What was expected vs actual\n';
          body += '- **Suggestion**: Specific action to resolve\n';
          body += '- **Example**: Working code showing correct usage\n';
          body += '- **Confidence**: How certain we are about the error\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Fail if requirements not met
      if: steps.review.outputs.errors_without_suggestions == 'true' || steps.review.outputs.errors_without_examples == 'true'
      run: |
        echo "❌ Error review failed - missing required fields"
        exit 1

  error-audit:
    name: Weekly Error Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run comprehensive audit
      run: |
        echo "# Weekly Error Message Audit" > audit-report.md
        echo "Date: $(date)" >> audit-report.md
        echo "" >> audit-report.md
        
        # Count errors by type
        echo "## Error Statistics" >> audit-report.md
        echo "- Total cognitive_error! macros: $(grep -c "cognitive_error!" **/*.rs || echo "0")" >> audit-report.md
        echo "- Files with errors: $(grep -l "cognitive_error!" **/*.rs | wc -l || echo "0")" >> audit-report.md
        echo "" >> audit-report.md
        
        # Check for common issues
        echo "## Quality Checks" >> audit-report.md
        
        # Vague suggestions
        VAGUE=$(grep -E "suggestion:.*\"(fix|check|try|maybe)" **/*.rs | wc -l || echo "0")
        if [ "$VAGUE" -gt "0" ]; then
          echo "- ⚠️ Found $VAGUE errors with vague suggestions" >> audit-report.md
        else
          echo "- ✅ No vague suggestions found" >> audit-report.md
        fi
        
        # Short examples
        SHORT=$(grep -E "example:.*\".{0,10}\"" **/*.rs | wc -l || echo "0")
        if [ "$SHORT" -gt "0" ]; then
          echo "- ⚠️ Found $SHORT errors with very short examples" >> audit-report.md
        else
          echo "- ✅ All examples have adequate length" >> audit-report.md
        fi
        
        # Low confidence
        LOW_CONF=$(grep -E "confidence:.*LOW" **/*.rs | wc -l || echo "0")
        if [ "$LOW_CONF" -gt "5" ]; then
          echo "- ⚠️ Many errors ($LOW_CONF) have low confidence" >> audit-report.md
        else
          echo "- ✅ Most errors have high confidence" >> audit-report.md
        fi
        
    - name: Create audit issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly Error Message Audit - ${date}`,
            body: `## Weekly Error Message Audit
            
This is an automated audit of error messages in the codebase.

### Action Items
- [ ] Review errors with vague suggestions
- [ ] Improve examples that are too short
- [ ] Investigate low-confidence errors
- [ ] Update error documentation

See the [audit report artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['error-review', 'documentation', 'quality']
          });