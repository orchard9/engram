[workspace]
resolver = "2"
members = [
    "engram-core",
    "engram-storage",
    "engram-cli",
    "engram-proto",
]
exclude = [
    "engram-core/fuzz",
]

[workspace.package]
version = "0.1.0"
edition = "2024"
authors = ["Engram Contributors"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/orchard9/engram"
homepage = "https://engram.io"
keywords = ["graph", "database", "cognitive", "memory", "probabilistic"]
categories = ["database", "data-structures"]

[workspace.dependencies]
# Error handling
thiserror = "1.0"
anyhow = "1.0"
color-eyre = "0.6"

# Core graph library
petgraph = "0.8"

# Concurrency
tokio = { version = "1.47", features = ["full"] }
parking_lot = "0.12"
crossbeam = "0.8"
rayon = "1.11"

# Memory management  
mimalloc = "0.1"
bumpalo = "3.16"
atomic_float = "1.0"

# Vector operations
nalgebra = "0.34"
simdeez = "2.0"
wide = "0.7"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"
rkyv = "0.7"

# Storage
memmap2 = "0.9"
zstd = "0.13"

# Data structures
dashmap = "5.5"

# Logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# CLI
clap = { version = "4.4", features = ["derive"] }

# Testing
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.5"
quickcheck = "1.0"
assert_cmd = "2.0"
predicates = "3.0"
divan = "0.1"
rand = "0.8"
approx = "0.5"

# Profiling
pprof = "0.13"
memory-stats = "1.2"

# GPU compute
wgpu = "26.0"

# Development dependencies
arbitrary = "1.3"

# Documentation and content generation
doc-comment = "0.3"
include_dir = "0.7"
indoc = "2.0"

# OpenAPI documentation
utoipa = { version = "4", features = ["axum_extras"] }
utoipa-swagger-ui = { version = "6", features = ["axum"] }

# [patch.crates-io] section REMOVED 2025-10-05
# All vendored patches eliminated - using upstream versions
# Testing showed patches were unnecessary and potentially harmful
# See third_party/PATCHES.md for full analysis

[workspace.lints.rust]
unsafe_code = "warn"
missing_docs = "warn"

[workspace.lints.clippy]
# Enable comprehensive linting (groups)
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }

# Override specific pedantic lints that are too noisy (higher priority)
cast_possible_truncation = "allow"  # Intentional in numeric conversions
cast_precision_loss = "allow"       # Acceptable for our use case
cast_sign_loss = "allow"            # Intentional in conversions
cast_possible_wrap = "allow"        # Handled by checks
too_many_lines = "allow"            # Some modules are necessarily large
missing_errors_doc = "allow"        # Self-evident error types
missing_panics_doc = "allow"        # Most panics are documented via asserts
module_name_repetitions = "allow"   # Sometimes clearer with repetition
doc_markdown = "allow"              # Allow flexibility in doc formatting

# Override specific nursery lints
cognitive_complexity = "allow"      # Some algorithms are inherently complex
suboptimal_flops = "allow"         # Compiler often optimizes this anyway

# Override cargo lints that are expected
multiple_crate_versions = "allow"   # Transitive deps often have duplicates

[profile.release]
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.bench]
inherits = "release"
debug = true
