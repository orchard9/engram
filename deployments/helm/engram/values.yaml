# Global settings
global:
  imagePullSecrets: []
  storageClass: "fast-ssd"

# Deployment configuration
statefulset:
  replicaCount: 1
  updateStrategy:
    type: OnDelete

# Image configuration
image:
  repository: engram/engram
  pullPolicy: IfNotPresent
  tag: ""

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  fsGroup: 65534
  fsGroupChangePolicy: "OnRootMismatch"

# Container security
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
    add: ["NET_BIND_SERVICE"]
  readOnlyRootFilesystem: true
  seccompProfile:
    type: RuntimeDefault

# Service configuration
service:
  type: ClusterIP
  httpPort: 7432
  grpcPort: 50051
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  annotations: {}
  sessionAffinity: ClientIP
  sessionAffinityTimeoutSeconds: 10800

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
  hosts:
    - host: engram.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 2Gi
  requests:
    cpu: 1000m
    memory: 2Gi
    ephemeral-storage: 1Gi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 20Gi
  annotations: {}
  existingClaim: ""
  dataSource: {}

# Probe configuration
probes:
  startup:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 12
    successThreshold: 1

  liveness:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

# Node selection
nodeSelector: {}

# Tolerations for node taints
tolerations: []

# Affinity rules
affinity:
  podAntiAffinity:
    enabled: true
    topologyKey: kubernetes.io/hostname

  nodeAffinity:
    enabled: false
    matchExpressions: []

# Priority class
priorityClassName: ""

# Topology spread constraints
topologySpreadConstraints: []

# Application configuration
config:
  dataDir: /data
  logLevel: info

  featureFlags:
    spreadingApiBeta: true

  memorySpaces:
    defaultSpace: "default"
    bootstrapSpaces: ["default"]

  persistence:
    hotCapacity: 10000
    warmCapacity: 100000
    coldCapacity: 1000000
    flushIntervalSec: 30
    compressionEnabled: true

  consolidation:
    enabled: true
    intervalSec: 60
    batchSize: 1000
    parallelWorkers: 4

  cache:
    sizeMb: 2048
    ttlSec: 3600

  performance:
    maxConcurrentQueries: 100
    queryTimeoutSec: 30

  mimalloc:
    largeOsPages: true
    reserveHugeOsPages: 4

# Environment variables
env: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# Monitoring configuration
monitoring:
  prometheus:
    enabled: false
    serviceMonitor:
      enabled: false
      interval: 30s
      scrapeTimeout: 10s
      labels: {}

  grafana:
    enabled: false
    dashboards:
      enabled: false
      labels:
        grafana_dashboard: "1"

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: 7
  storageClass: "slow-disk"
  size: 50Gi

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Extra manifests
extraManifests: []
