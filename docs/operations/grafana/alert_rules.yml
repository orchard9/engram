# Prometheus Alert Rules - Engram Cognitive Patterns
#
# These alerts monitor cognitive pattern correctness and system health.
# Alert thresholds are derived from psychology research and Task 001 requirements.
#
# Usage:
#   1. Add to Prometheus configuration:
#      rule_files:
#        - "alert_rules.yml"
#
#   2. Validate syntax:
#      promtool check rules alert_rules.yml
#
#   3. Test alert expressions:
#      promtool test rules alert_rules_test.yml

groups:
  - name: engram_cognitive_patterns
    interval: 30s
    rules:
      # CRITICAL: Biological plausibility validation
      # DRM false recall rate must stay within [45%, 75%] to match empirical data
      - alert: DRMFalseRecallOutOfRange
        expr: |
          (
            rate(engram_drm_critical_lure_recalls_total[5m]) /
            (rate(engram_drm_critical_lure_recalls_total[5m]) +
             rate(engram_drm_list_item_recalls_total[5m]))
          ) < 0.45
          OR
          (
            rate(engram_drm_critical_lure_recalls_total[5m]) /
            (rate(engram_drm_critical_lure_recalls_total[5m]) +
             rate(engram_drm_list_item_recalls_total[5m]))
          ) > 0.75
        for: 10m
        labels:
          severity: critical
          component: cognitive_patterns
          category: biological_plausibility
        annotations:
          summary: "DRM false recall rate outside [45%, 75%] acceptance range"
          description: "False recall rate {{ $value | humanizePercentage }} violates biological plausibility (target: 55-65%, acceptable: 45-75%). This indicates cognitive mechanisms are not functioning correctly."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#drm-calibration"
          impact: "Cognitive architecture correctness compromised. False memory generation deviates from human memory research (Roediger & McDermott 1995)."
          action: "1. Check semantic priming strength (Panel 1.2). 2. Review pattern completion threshold. 3. Validate DRM word lists. 4. Run: cargo test psychology::drm_paradigm"

      # CRITICAL: Metrics overhead budget violation
      # Task 001 requires <1% overhead for metrics collection
      - alert: MetricsOverheadTooHigh
        expr: engram_metrics_overhead_percent > 1.0
        for: 5m
        labels:
          severity: critical
          component: metrics
          category: performance
        annotations:
          summary: "Metrics overhead exceeds 1% threshold"
          description: "Metrics collection overhead {{ $value }}% violates <1% performance budget (Task 001 requirement). This degrades core Engram performance."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#metrics-overhead"
          impact: "Performance degradation affects query latency and throughput. Metrics instrumentation is too expensive."
          action: "1. Profile metrics recording: cargo bench --bench metrics_overhead. 2. Reduce histogram bucket count. 3. Disable non-critical metrics temporarily. 4. Review Task 001 zero-overhead guarantees."

      # WARNING: Reconsolidation window misconfiguration
      # Window hit rate <50% indicates timing parameters don't match memory access patterns
      - alert: ReconsolidationWindowHitRateLow
        expr: |
          rate(engram_reconsolidation_window_hits_total[5m]) /
          (rate(engram_reconsolidation_window_hits_total[5m]) +
           rate(engram_reconsolidation_window_misses_total[5m])) < 0.50
        for: 10m
        labels:
          severity: warning
          component: reconsolidation
          category: configuration
        annotations:
          summary: "Reconsolidation window hit rate below 50%"
          description: "Window hit rate {{ $value | humanizePercentage }} below target (>50%). Reconsolidation timing parameters may not match memory access patterns."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#reconsolidation-tuning"
          impact: "Suboptimal reconsolidation effectiveness. Memories may not be updated during optimal plasticity window."
          action: "1. Measure actual window timing. 2. Review memory access patterns. 3. Adjust plasticity factor bounds (Panel 3.3). 4. Correlate with recall performance (Panel 4.1). 5. Consult cognitive-architecture-designer agent."

      # WARNING: Extreme interference detection
      # P95 interference >0.8 indicates severe memory conflicts that may degrade recall
      - alert: ProactiveInterferenceTooHigh
        expr: histogram_quantile(0.95, engram_proactive_interference_magnitude_bucket) > 0.8
        for: 10m
        labels:
          severity: warning
          component: interference
          category: memory_conflict
        annotations:
          summary: "P95 proactive interference magnitude exceeds 0.8"
          description: "High interference magnitude {{ $value }} may degrade recall performance. P95 should be <0.8 for healthy memory dynamics."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#interference-mitigation"
          impact: "Recall failures may increase due to extreme memory conflicts. Retrieval time may slow."
          action: "1. Identify interfering episode pairs (Panel 2.3). 2. Check fan-out distribution. 3. Review semantic similarity threshold. 4. Consider episode consolidation. 5. Validate interference aligns with psychology research (some interference is correct)."

      # CRITICAL: Event buffer overflow (data loss)
      # Any dropped events indicate tracing data loss, which is unacceptable
      - alert: CognitiveEventsDropped
        expr: rate(engram_cognitive_events_dropped_total[5m]) > 0
        for: 1m
        labels:
          severity: critical
          component: tracing
          category: data_loss
        annotations:
          summary: "Cognitive events being dropped"
          description: "Dropping {{ $value | humanize }} events/sec due to buffer overflow or slow consumer. Data loss is unacceptable for tracing."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#event-buffer-tuning"
          impact: "Tracing data loss. Cannot debug cognitive pattern issues without complete event stream."
          action: "1. Check consumer throughput: metrics.streaming_stats(). 2. Increase buffer size: ENGRAM_EVENT_BUFFER_SIZE=100000. 3. Add consumer threads. 4. Filter low-priority events. 5. Enable backpressure."

      # WARNING: Event buffer approaching capacity
      # Buffer >80% full indicates imminent overflow, gives time to react before data loss
      - alert: CognitiveEventBufferHighUtilization
        expr: engram_cognitive_event_buffer_utilization > 80
        for: 2m
        labels:
          severity: warning
          component: tracing
          category: capacity
        annotations:
          summary: "Cognitive event buffer utilization high"
          description: "Event buffer {{ $value }}% full. May drop events soon if utilization continues to increase."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#event-buffer-tuning"
          impact: "Risk of imminent data loss if buffer overflows. Events may be dropped."
          action: "1. Monitor buffer utilization trend. 2. Pre-emptively increase buffer size if trending upward. 3. Check consumer throughput. 4. Prepare to add consumer threads if needed."

      # WARNING: Pattern completion not generating false memories
      # Critical lure generation rate = 0 indicates pattern completion failure
      - alert: DRMCriticalLureGenerationStopped
        expr: rate(engram_drm_critical_lure_generations_total[5m]) == 0
        for: 5m
        labels:
          severity: warning
          component: pattern_completion
          category: cognitive_mechanism
        annotations:
          summary: "No DRM critical lure generations detected"
          description: "Pattern completion has not generated any false memories in 5 minutes. Semantic priming may be too weak or pattern completion disabled."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#pattern-completion"
          impact: "False memory generation not functioning. DRM paradigm validation (Panel 4.1) may fail."
          action: "1. Check semantic priming strength distribution (Panel 1.2). 2. Verify pattern completion enabled. 3. Review semantic similarity threshold. 4. Ensure DRM queries are being executed. 5. Run: cargo test psychology::drm_paradigm --features cognitive_patterns"

  # Additional alert group for system-wide health checks
  - name: engram_system_health
    interval: 30s
    rules:
      # WARNING: Priming strength distribution skewed
      # P95 >0.9 indicates excessive priming that may cause false memories
      - alert: PrimingStrengthTooHigh
        expr: histogram_quantile(0.95, engram_priming_strength_bucket) > 0.9
        for: 10m
        labels:
          severity: warning
          component: priming
          category: calibration
        annotations:
          summary: "P95 priming strength exceeds 0.9"
          description: "Excessive priming strength {{ $value }} may cause unwanted false memory generation. P95 should be <0.9 for healthy priming dynamics."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#priming-calibration"
          impact: "May generate excessive false memories, pushing DRM false recall rate above acceptable range."
          action: "1. Increase semantic similarity threshold by 0.05. 2. Monitor DRM false recall rate (Panel 4.1). 3. Validate priming strength distribution (Panel 1.2). 4. Check for unexpected semantic associations (Panel 1.3)."

      # WARNING: Reconsolidation plasticity too high
      # P95 >0.9 indicates memories are too malleable, stability risk
      - alert: ReconsolidationPlasticityTooHigh
        expr: histogram_quantile(0.95, engram_reconsolidation_plasticity_factor_bucket) > 0.9
        for: 10m
        labels:
          severity: warning
          component: reconsolidation
          category: stability
        annotations:
          summary: "P95 reconsolidation plasticity exceeds 0.9"
          description: "High plasticity {{ $value }} indicates memories are too malleable. Risk of losing information during reconsolidation."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#reconsolidation-tuning"
          impact: "Memory stability risk. Reconsolidation may cause excessive memory modifications, losing original information."
          action: "1. Reduce plasticity factor bounds. 2. Check modifications per event (Panel 3.2). 3. Validate against recall performance. 4. Review plasticity decay rate. 5. Consult cognitive-architecture-designer agent."

      # WARNING: Interference spike detection
      # Sudden 2x increase in interference rate may indicate memory conflict storm
      - alert: InterferenceRateSpike
        expr: |
          (
            rate(engram_proactive_interference_total[5m]) +
            rate(engram_retroactive_interference_total[5m]) +
            rate(engram_fan_effect_interference_total[5m])
          ) > 2 * (
            rate(engram_proactive_interference_total[1h] offset 1h) +
            rate(engram_retroactive_interference_total[1h] offset 1h) +
            rate(engram_fan_effect_interference_total[1h] offset 1h)
          )
        for: 5m
        labels:
          severity: warning
          component: interference
          category: anomaly_detection
        annotations:
          summary: "Interference rate spike detected"
          description: "Total interference rate {{ $value | humanize }} events/sec is >2x baseline. May indicate memory conflict storm or sudden workload change."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#interference-mitigation"
          impact: "Potential recall performance degradation. High interference may slow retrieval and increase recall failures."
          action: "1. Correlate with memory write burst (check consolidation metrics). 2. Identify interfering episode pairs (Panel 2.3). 3. Monitor interference magnitude (Panel 2.2). 4. Check if spike is transient or sustained."

      # INFO: No DRM trials executed (fresh deployment)
      # This is expected on fresh deployments, but should resolve after first DRM query
      - alert: NoDRMTrialsExecuted
        expr: |
          absent(engram_drm_critical_lure_recalls_total) OR
          absent(engram_drm_list_item_recalls_total)
        for: 30m
        labels:
          severity: info
          component: cognitive_patterns
          category: initialization
        annotations:
          summary: "No DRM trials executed yet"
          description: "DRM metrics not present after 30 minutes. This is expected on fresh deployment but should resolve after first DRM query."
          runbook_url: "https://docs.engram.dev/operations/troubleshooting#drm-calibration"
          impact: "Cannot validate biological plausibility until DRM trials execute. Panel 4.1 (DRM false recall rate) will show 'No Data'."
          action: "1. Execute DRM test queries: cargo test psychology::drm_paradigm --nocapture. 2. Verify DRM queries in production workload. 3. Check if pattern completion is enabled. 4. No action needed if deployment is <30 minutes old."

# Alert rule validation tests
# Save as alert_rules_test.yml and run: promtool test rules alert_rules_test.yml
#
# rule_files:
#   - alert_rules.yml
#
# evaluation_interval: 30s
#
# tests:
#   - interval: 1m
#     input_series:
#       - series: 'engram_drm_critical_lure_recalls_total{instance="localhost:9090"}'
#         values: '0+10x10'  # 0, 10, 20, ..., 100 (increasing counter)
#       - series: 'engram_drm_list_item_recalls_total{instance="localhost:9090"}'
#         values: '0+15x10'  # 0, 15, 30, ..., 150 (increasing counter)
#
#     alert_rule_test:
#       - eval_time: 10m
#         alertname: DRMFalseRecallOutOfRange
#         exp_alerts:
#           - exp_labels:
#               severity: critical
#               component: cognitive_patterns
#             exp_annotations:
#               summary: "DRM false recall rate outside [45%, 75%] acceptance range"
#
#   - interval: 1m
#     input_series:
#       - series: 'engram_metrics_overhead_percent{instance="localhost:9090"}'
#         values: '0.5 0.5 0.5 1.2 1.2 1.2 1.2 1.2 1.2'  # Overhead spikes to 1.2% at t=3m
#
#     alert_rule_test:
#       - eval_time: 8m
#         alertname: MetricsOverheadTooHigh
#         exp_alerts:
#           - exp_labels:
#               severity: critical
#               component: metrics
